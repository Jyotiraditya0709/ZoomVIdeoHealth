generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_DIRECT_URL")
}

model Room {
    id              String   @id @default(cuid())
    name            String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    title           String
    content         String
    User_CreatedBy  User     @relation("RoomByUser", fields: [createdById], references: [id])
    createdById     String
    // User_CreatedFor User[]   @relation("RoomForUser")
    createdForEmail String[]

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(cuid())
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    roomId         Int?
    // Room_CreatedFor Room[]    @relation("RoomForUser")
    Room_CreatedBy Room[]    @relation("RoomByUser")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
