generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_DIRECT_URL")
}

model Room {
    id              String   @id @default(cuid())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    title           String
    content         String
    time            DateTime
    duration        Int
    User_CreatedBy  User     @relation("RoomByUser", fields: [createByUserId], references: [id])
    createByUserId  String
    User_CreatedFor User[]   @relation("RoomForUser")
    Notes           String? // @db.Text
    Transcript      String? // @db.Text
    // createdForUserIds String[]
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    role            Role      @default(patient)
    Room_CreatedFor Room[]    @relation("RoomForUser")
    Room_CreatedBy  Room[]    @relation("RoomByUser")
    patientId       String?   @unique
    Patient         Patient?  @relation(fields: [patientId], references: [id])
    doctorId        String?   @unique
    Doctor          Doctor?   @relation(fields: [doctorId], references: [id])
}

model Patient {
    id          String    @id @default(cuid())
    height      Float?
    weight      Float?
    bloodType   String?
    allergies   String?
    medications String?
    DOB         DateTime?
    userId      String    @unique
    User        User?
    files       File[]
}

model File {
    id        String   @id @default(cuid())
    name      String
    type      String
    Patient   Patient  @relation(fields: [patientId], references: [id])
    patientId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Doctor {
    id         String  @id @default(cuid())
    userId     String  @unique
    User       User?
    department String?
    position   String?
}

enum Role {
    doctor
    patient
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
